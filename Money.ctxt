#BlueJ class context
comment0.target=Money
comment0.text=\r\n\ Blueprint\ for\ Money\ objects...\r\n\r\n\ @author\ (Ryan\ Deisler\ &\ Akmal\ Muminov)\r\n\ @version\ (2/20/18)\r\n
comment1.params=theDollars\ theCents
comment1.target=Money(int,\ int)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Money\:\ initialize\ all\ attributes\r\n\ \r\n\ @param\ an\ int\ theDollars,\ the\ number\ of\ dollars\r\n\ @param\ an\ int\ theCents,\ the\ number\ of\ cents\r\n
comment10.params=
comment10.target=long\ getTotalCents()
comment10.text=\r\n\ getTotalCents\:\ what\ it\ sounds\ like\r\n
comment2.params=theCents
comment2.target=Money(long)
comment2.text=\r\n\ Constructor\ for\ objects\ of\ class\ Money\:\ initialize\ all\ attributes\r\n\ \r\n\ @param\ a\ long\ theCents,\ the\ total\ number\ of\ cents\r\n
comment3.params=
comment3.target=int\ getDollars()
comment3.text=\r\n\ getDollars\:\ return\ the\ number\ of\ dollars\r\n\ \r\n\ Precondition\:\ This\ money\ object\ is\ valid\r\n\ Postcondition\:\ The\ int\ returned\ is\ the\ number\ of\ dollars\ of\ this\ Money\r\n\ \r\n\ @return\ an\ int,\ the\ number\ of\ dollars\r\n
comment4.params=
comment4.target=int\ getCents()
comment4.text=\r\n\ getCents\:\ return\ the\ number\ of\ cents\r\n\ \r\n\ Precondition\:\ This\ money\ object\ is\ valid\r\n\ Postcondition\:\ The\ int\ returned\ is\ the\ number\ of\ cents\ of\ this\ Money\r\n\ \r\n\ @return\ an\ int,\ the\ number\ of\ cents\r\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\r\n\ toString\r\n\ @return\ a\ String\ representation\ of\ this\ object\r\n\ Precondition\:\ this\ Money\ object\ is\ valid\r\n\ Postcondition\:\ String\ object\ is\ returned\ that\ can\ be\ printed\r\n
comment6.params=other
comment6.target=boolean\ equals(Money)
comment6.text=\r\n\ equals\:\ determines\ if\ two\ money\ objects\ are\ equal\r\n\ \r\n\ @return\ a\ boolean,\ true\ if\ calling\ object\ is\ the\ same\ as\ parameter\ object\r\n\ @param\ Money\ object,\ other\r\n\ \r\n\ Precondition\:\ Both\ Money\ objects\ are\ valid\r\n\ Postcondition\:\ A\ boolean\ is\ returned\r\n
comment7.params=theMoney
comment7.target=Money\ add(Money)
comment7.text=\r\n\ add\:\ adds\ two\ Money\ objects\ \r\n\ \r\n\ Precondition\:\ two\ Money\ amounts\ are\ created\ and\ valid\r\n\ Postcondition\:\ the\ amount\ in\ this\ Money\ object\ is\ added\ to\ theMoney;\r\n\ The\ Money\ returned\ is\ the\ sum\ of\ the\ two\ Moneys\r\n\ Neither\ the\ calling\ object\ nor\ the\ parameter\ are\ changed.\r\n\ \r\n\ @param\ a\ Money,\ the\ Money\ amount\ to\ add\ to\ the\ calling\ object\ (this)\r\n\ @return\ a\ Money,\ the\ sum\ of\ the\ two\ money\ objects\r\n
comment8.params=theMoney
comment8.target=Money\ subtract(Money)
comment8.text=\r\n\ subtract\:\ adds\ two\ Money\ objects\ \r\n\ \r\n\ Precondition\:\ two\ Money\ amounts\ are\ created\ and\ valid\r\n\ Postcondition\:\ the\ amount\ in\ theMoney\ object\ is\ subtracted\ from\ this\ Money;\r\n\ The\ Money\ returned\ is\ the\ difference\ of\ the\ two\ Moneys\r\n\ Neither\ the\ calling\ object\ nor\ the\ parameter\ are\ changed.\r\n\ \r\n\ @param\ a\ Money,\ the\ Money\ amount\ to\ subtract\ from\ the\ calling\ object\ (this)\r\n\ @return\ a\ Money,\ the\ difference\ of\ the\ two\ money\ objects\r\n
comment9.params=theMoney
comment9.target=int\ compareTo(Money)
comment9.text=\r\n\ compareTo\:\ compares\ two\ Money\ objects\ \r\n\ \r\n\ Precondition\:\ two\ Money\ amounts\ are\ created\ and\ valid\r\n\ Postcondition\:\ the\ int\ returned\ represents\ if\ this\ Money\ is\ equal\ to,\r\n\ greater\ than,\ or\ less\ than\ theMoney\ object\r\n\ 0\ means\ equal,\ 1\ means\ this\ Money\ >\ theMoney,\ -1\ means\ this\ Money\ <\ theMoney\r\n\ \r\n\ @param\ a\ Money,\ theMoney\r\n\ @return\ an\ int,\ result\r\n
numComments=11
